<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TMCache.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TMCache</TokenIdentifier>
			<Abstract type="html">TMCache comprises two caches, one in memory and one on disk. It accepts NSData objects,
writes them to disk, and manages their lifetime in the background based on certain conditions.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setName:</TokenIdentifier>
			<Abstract type="html">The name of the cache is used in three places:
- the disk cache directory path
- the name property of the queue, which appears in stack traces
- the description method</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (copy, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/name</TokenIdentifier>
			<Abstract type="html">The name of the cache is used in three places:
- the disk cache directory path
- the name property of the queue, which appears in stack traces
- the description method</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (copy, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setQueue:</TokenIdentifier>
			<Abstract type="html">A serial queue where nearly all work is performed. Only one queue is created per cache name,
so this queue will be the same object across different instances with the same name. This
queue can safely target any other queue for integration with an existing system.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) dispatch_queue_t queue</Declaration>
			
			
			<Anchor>//api/name/queue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/queue</TokenIdentifier>
			<Abstract type="html">A serial queue where nearly all work is performed. Only one queue is created per cache name,
so this queue will be the same object across different instances with the same name. This
queue can safely target any other queue for integration with an existing system.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) dispatch_queue_t queue</Declaration>
			
			
			<Anchor>//api/name/queue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setMemoryCacheByteLimit:</TokenIdentifier>
			<Abstract type="html">When the memory cache exceeds this byte limit data will start being evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger memoryCacheByteLimit</Declaration>
			
			
			<Anchor>//api/name/memoryCacheByteLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/memoryCacheByteLimit</TokenIdentifier>
			<Abstract type="html">When the memory cache exceeds this byte limit data will start being evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger memoryCacheByteLimit</Declaration>
			
			
			<Anchor>//api/name/memoryCacheByteLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setMemoryCacheCountLimit:</TokenIdentifier>
			<Abstract type="html">When the memory cache exceeds this object limit data will start being evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger memoryCacheCountLimit</Declaration>
			
			
			<Anchor>//api/name/memoryCacheCountLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/memoryCacheCountLimit</TokenIdentifier>
			<Abstract type="html">When the memory cache exceeds this object limit data will start being evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger memoryCacheCountLimit</Declaration>
			
			
			<Anchor>//api/name/memoryCacheCountLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setWillEvictDataFromMemoryBlock:</TokenIdentifier>
			<Abstract type="html">Executed for each NSData object right before it is evicted from the memory cache.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMCacheDataBlock willEvictDataFromMemoryBlock</Declaration>
			
			
			<Anchor>//api/name/willEvictDataFromMemoryBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/willEvictDataFromMemoryBlock</TokenIdentifier>
			<Abstract type="html">Executed for each NSData object right before it is evicted from the memory cache.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMCacheDataBlock willEvictDataFromMemoryBlock</Declaration>
			
			
			<Anchor>//api/name/willEvictDataFromMemoryBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setDiskCacheByteLimit:</TokenIdentifier>
			<Abstract type="html">When the disk cache exceeds this byte limit data will start being evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger diskCacheByteLimit</Declaration>
			
			
			<Anchor>//api/name/diskCacheByteLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/diskCacheByteLimit</TokenIdentifier>
			<Abstract type="html">When the disk cache exceeds this byte limit data will start being evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger diskCacheByteLimit</Declaration>
			
			
			<Anchor>//api/name/diskCacheByteLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setDiskCacheMaxAge:</TokenIdentifier>
			<Abstract type="html">Data in the disk cache older than this number of seconds will be evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSTimeInterval diskCacheMaxAge</Declaration>
			
			
			<Anchor>//api/name/diskCacheMaxAge</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/diskCacheMaxAge</TokenIdentifier>
			<Abstract type="html">Data in the disk cache older than this number of seconds will be evicted in the background.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSTimeInterval diskCacheMaxAge</Declaration>
			
			
			<Anchor>//api/name/diskCacheMaxAge</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setWillEvictDataFromDiskBlock:</TokenIdentifier>
			<Abstract type="html">Executed for every file right before it is evicted from the disk cache, except as a result of
clearDiskCache: or clearAllCaches:.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMCacheDataBlock willEvictDataFromDiskBlock</Declaration>
			
			
			<Anchor>//api/name/willEvictDataFromDiskBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/willEvictDataFromDiskBlock</TokenIdentifier>
			<Abstract type="html">Executed for every file right before it is evicted from the disk cache, except as a result of
clearDiskCache: or clearAllCaches:.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMCacheDataBlock willEvictDataFromDiskBlock</Declaration>
			
			
			<Anchor>//api/name/willEvictDataFromDiskBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setCurrentMemoryBytes:</TokenIdentifier>
			<Abstract type="html">The current memory usage, in bytes.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentMemoryBytes</Declaration>
			
			
			<Anchor>//api/name/currentMemoryBytes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/currentMemoryBytes</TokenIdentifier>
			<Abstract type="html">The current memory usage, in bytes.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentMemoryBytes</Declaration>
			
			
			<Anchor>//api/name/currentMemoryBytes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setCurrentMemoryCount:</TokenIdentifier>
			<Abstract type="html">The current number of itmes cached in memory.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentMemoryCount</Declaration>
			
			
			<Anchor>//api/name/currentMemoryCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/currentMemoryCount</TokenIdentifier>
			<Abstract type="html">The current number of itmes cached in memory.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentMemoryCount</Declaration>
			
			
			<Anchor>//api/name/currentMemoryCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setCurrentDiskBytes:</TokenIdentifier>
			<Abstract type="html">The current disk usage, in bytes.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentDiskBytes</Declaration>
			
			
			<Anchor>//api/name/currentDiskBytes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/currentDiskBytes</TokenIdentifier>
			<Abstract type="html">The current disk usage, in bytes.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentDiskBytes</Declaration>
			
			
			<Anchor>//api/name/currentDiskBytes</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setCurrentDiskCount:</TokenIdentifier>
			<Abstract type="html">The current number of itmes cached on disk.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentDiskCount</Declaration>
			
			
			<Anchor>//api/name/currentDiskCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMCache/currentDiskCount</TokenIdentifier>
			<Abstract type="html">The current number of itmes cached on disk.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>@property (assign, readonly) NSUInteger currentDiskCount</Declaration>
			
			
			<Anchor>//api/name/currentDiskCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/initWithName:</TokenIdentifier>
			<Abstract type="html">Creates a new TMCache.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/TMCache/name</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (instancetype)initWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">A name for the cache.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A cache with the specified name.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TMCache/withName:</TokenIdentifier>
			<Abstract type="html">Creates a new TMCache.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/TMCache/name</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (instancetype)withName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">A name for the cache.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An autoreleased cache with the specified name.</Abstract></ReturnValue>
			<Anchor>//api/name/withName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TMCache/sharedCache</TokenIdentifier>
			<Abstract type="html">A singleton shared cache accessible anywhere in the app.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)sharedCache</Declaration>
			
			<ReturnValue><Abstract type="html">The shared cache.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/clearMemoryCache:</TokenIdentifier>
			<Abstract type="html">Clears the memory cache asynchronously.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)clearMemoryCache:(TMCacheBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block executed after the cache has been cleared.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/clearMemoryCache:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/clearDiskCache:</TokenIdentifier>
			<Abstract type="html">Clears the disk cache asynchronously.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)clearDiskCache:(TMCacheBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block executed after the cache has been cleared.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/clearDiskCache:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/clearAllCaches:</TokenIdentifier>
			<Abstract type="html">Clears both memory and disk caches asynchronously.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)clearAllCaches:(TMCacheBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block executed after the caches have been cleared.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/clearAllCaches:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/clearMemoryCache</TokenIdentifier>
			<Abstract type="html">Clears the memory cache synchronously, blocking the calling thread until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)clearMemoryCache</Declaration>
			
			
			<Anchor>//api/name/clearMemoryCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/clearDiskCache</TokenIdentifier>
			<Abstract type="html">Clears the disk cache synchronously, blocking the calling thread until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)clearDiskCache</Declaration>
			
			
			<Anchor>//api/name/clearDiskCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/clearAllCaches</TokenIdentifier>
			<Abstract type="html">Clears both memory and disk caches synchronously, blocking the calling thread until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)clearAllCaches</Declaration>
			
			
			<Anchor>//api/name/clearAllCaches</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/trimDiskCacheToSize:block:</TokenIdentifier>
			<Abstract type="html">Trims the disk cache to the specified size asynchronously, starting with items having the
oldest access date.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)trimDiskCacheToSize:(NSUInteger)bytes block:(TMCacheBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>bytes</Name>
					<Abstract type="html">The maxmimum number of bytes left on disk after the trim.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block executed after the disk has been trimmed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimDiskCacheToSize:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/trimDiskCacheToDate:block:</TokenIdentifier>
			<Abstract type="html">Trims the disk cache asynchronously of all items with an access date older than the specified date.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)trimDiskCacheToDate:(NSDate *)date block:(TMCacheBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">The date of the oldest permissible item in the disk cache.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block executed after the disk has been trimmed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimDiskCacheToDate:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/trimDiskCacheToSize:</TokenIdentifier>
			<Abstract type="html">Trims the disk cache synchronously, blocking the calling thread until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMCache/trimDiskCacheToSize:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)trimDiskCacheToSize:(NSUInteger)bytes</Declaration>
			<Parameters>
				<Parameter>
					<Name>bytes</Name>
					<Abstract type="html">The maxmimum number of bytes left on disk after the trim.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimDiskCacheToSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/trimDiskCacheToDate:</TokenIdentifier>
			<Abstract type="html">Trims the disk cache synchronously, blocking the calling thread until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMCache/trimDiskCacheToDate:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)trimDiskCacheToDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">The date of the oldest permissible item in the disk cache.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimDiskCacheToDate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/dataForKey:block:</TokenIdentifier>
			<Abstract type="html">Retrives data with the specified key from the cache asynchronously. In the event of the data
not being available the completion block is executed with nil.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)dataForKey:(NSString *)key block:(TMCacheDataBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the requested data.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block to be excuted after the data has been retrieved.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dataForKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/fileURLForKey:block:</TokenIdentifier>
			<Abstract type="html">Retrives the file URL with the specified key from the cache asynchronously. In the event of the file
not being available the completion block is executed with nil. The data itself is not accessed.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)fileURLForKey:(NSString *)key block:(TMCacheDataBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the requested file URL.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block to be excuted after the data has been retrieved.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fileURLForKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/removeDataForKey:block:</TokenIdentifier>
			<Abstract type="html">Removes data with the specified key from the cache asynchronously.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeDataForKey:(NSString *)key block:(TMCacheDataBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the data to be removed.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block to be excuted after the data has been removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeDataForKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setData:forKey:block:</TokenIdentifier>
			<Abstract type="html">Adds data to the cache asynchronously with the specified key.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
			<Declaration>- (void)setData:(NSData *)data forKey:(NSString *)key block:(TMCacheDataBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract type="html">The data to be added to the cache.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the data being added.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">A block to be excuted after the data has been added.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setData:forKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/dataForKey:</TokenIdentifier>
			<Abstract type="html">Retrives data with the specified key from the cache synchronously, blocking the calling thread
until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMCache/dataForKey:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSData *)dataForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the requested data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The data for the specified key.</Abstract></ReturnValue>
			<Anchor>//api/name/dataForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/fileURLForKey:</TokenIdentifier>
			<Abstract type="html">Retrives the file URL with the specified key from the cache synchronously, blocking the calling
thread until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMCache/fileURLForKey:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSURL *)fileURLForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the requested file URL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The file URL for the specified key.</Abstract></ReturnValue>
			<Anchor>//api/name/fileURLForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/removeDataForKey:</TokenIdentifier>
			<Abstract type="html">Removes data with the specified key from the cache synchronously, blocking the calling thread
until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMCache/removeDataForKey:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)removeDataForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the data to be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeDataForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMCache/setData:forKey:</TokenIdentifier>
			<Abstract type="html">Adds data to the cache asynchronously with the specified key, blocking the calling thread
until finished.</Abstract>
			<DeclaredIn>TMCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMCache/setData:forKey:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setData:(NSData *)data forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>data</Name>
					<Abstract type="html">The data to be added to the cache.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key for the data being added.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setData:forKey:</Anchor>
		</Token>
		
	</File>
</Tokens>